package com.migu.online.controller.ops;

import java.util.Date;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.apache.shiro.SecurityUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSON;
import com.github.pagehelper.Page;
import com.google.common.base.Strings;
import com.google.common.collect.Maps;
import com.migu.online.common.Constants;
import com.migu.online.controller.response.ResponsePageData;
import com.migu.online.model.PrivateTutor;
import com.migu.online.model.system.SysUser;
import com.migu.online.ops.vo.PrivateTutorOpsVo;
import com.migu.online.service.PrivateTutorService;
import com.migu.online.utils.DateUtil;

/**
 * 私教课程
 * @author fanyunlong
 *
 */
@Controller
@RequestMapping("/ops/tutor")
public class PrivateTutorOpsController {

    @Autowired
    private PrivateTutorService privateTutorService;

    private Long currentTeacherId() {
        SysUser currentUser = (SysUser) SecurityUtils.getSubject().getPrincipal();
        return currentUser.getRelateId();
    }

    @GetMapping("index")
    public String index(ModelMap modelMap) {
        return "ops/tutor/index";
    }

    @SuppressWarnings("rawtypes")
    @GetMapping("data")
    @ResponseBody
    public ResponsePageData data(@RequestParam(value = "page", defaultValue = "0") Integer offset,
                                 @RequestParam(value = "limit", defaultValue = "10") Integer limit,
                                 @RequestParam(value = "filters", required = false) String _filters) throws Exception {
        Map<String, String> filters = Maps.newHashMap();
        filters.put("teacher_id", currentTeacherId().toString());

        if (_filters != null) {
            Map maps = (Map) JSON.parse(_filters);
            for (Object key : maps.keySet()) {
                filters.put((String) key, (String) maps.get(key));
            }
        }

        Page<PrivateTutorOpsVo> page = (Page<PrivateTutorOpsVo>) privateTutorService
                .selectConditionsByPage(offset, limit, filters);
        return new ResponsePageData<PrivateTutorOpsVo>(page.getTotal(), page);
    }


    @GetMapping("edit")
    public String edit(ModelMap modelMap, @RequestParam(value = "id", required = false) Long id,
                       @RequestParam(value = "flag", defaultValue = "1") Integer editFlag) throws Exception {
        if (editFlag > 0) {
            // show
            modelMap.put("data", privateTutorService.selectOpsOne(id));
        } else {
            // new
            modelMap.put("data", new PrivateTutor());
        }
        modelMap.put("edit", editFlag != 2);
        return "ops/tutor/edit";

    }


    @PostMapping("save")
    @ResponseBody
    public String save(PrivateTutor model, String beginTimeStr) throws Exception{
        if (null == model) {
            return "error";
        }
        if (Strings.isNullOrEmpty(model.getImagePath())) {
            model.setImagePath(Constants.USER_DEFAULT_AVATAR);
        }
        if (StringUtils.isNotEmpty(beginTimeStr)) {
			model.setBeginTime(DateUtil.getDate(beginTimeStr, DateUtil.DATATIMEF_STR));
		}
        if (model.getId() != null && model.getId() > 0) {
            // 更新
        	PrivateTutor record = privateTutorService.selectById(model.getId());
            if (null == record) {
                return "error";
            }
            record.setPrice(model.getPrice());
            record.setType(model.getType());
            record.setTitle(model.getTitle());
            record.setContent(model.getContent());
            record.setBeginTime(model.getBeginTime());
            record.setAddress(model.getAddress());
            record.setImagePath(model.getImagePath());
            record.setUpdateTime(new Date());
            return privateTutorService.createOrUpdate(record) >= 1 ? "success" : "error";
        } else {
            model.setTeacherId(currentTeacherId());
            model.setCreateTime(new Date());
            model.setUpdateTime(new Date());
            model.setIsDelete(0);
        }
        return privateTutorService.createOrUpdate(model) >= 1 ? "success" : "error";
    }
    
    @DeleteMapping("del")
	@ResponseBody
	public int del(@RequestParam("id") Long id) {
		return privateTutorService.deleteById(id);
	}

}
