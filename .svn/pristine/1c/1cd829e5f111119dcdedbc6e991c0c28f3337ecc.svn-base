package com.migu.online.controller.ops;

import java.util.Date;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.github.pagehelper.Page;
import com.migu.online.controller.response.ResponsePageData;
import com.migu.online.model.AppointmentManage;
import com.migu.online.ops.vo.AppointmentOpsVo;
import com.migu.online.service.AppointmentManageService;
import com.migu.online.service.ExamPlaceService;
import com.migu.online.utils.DateUtil;

@Controller
@RequestMapping("/ops/appointment/")
public class AppointmentOpsController {

    @Autowired
    private AppointmentManageService appointmentManageService;
    @Autowired
    private ExamPlaceService examPlaceService;

    /**
     *  ------页面跳转 start-----
     */
    @GetMapping("index")
    public String index(ModelMap modelMap){
        return "ops/appointment/index";
    }

    /**
     * 编辑，新增，查看 方法，。
     * @param modelMap
     * @param id
     * @param editFlag edit = 1, new = 0 , show = 2
     * @return
     */
    @GetMapping("edit")
    public String edit(ModelMap modelMap,@RequestParam(value = "id",required = false) Long id,
                       @RequestParam(value = "flag",defaultValue = "1") Integer editFlag){
    	AppointmentOpsVo model = new AppointmentOpsVo();
        if(editFlag > 0) {
            model = appointmentManageService.selectOpsById(id);
        }
        modelMap.put("data",model);
        modelMap.put("edit",editFlag);
        if (editFlag == 2) {
        	return "ops/appointment/show";
        } else if (editFlag == 0) {
            modelMap.put("examPlaceList",examPlaceService.selectAll());
        }
        return "ops/appointment/edit";
    }
    
    /**
     * 数据处理
     */
    @SuppressWarnings("rawtypes")
	@GetMapping("data")
    @ResponseBody
    public ResponsePageData data(@RequestParam(value = "page",defaultValue = "0") Integer offset,
                                    @RequestParam(value = "limit",defaultValue = "10") Integer limit,
                                 @RequestParam(value = "kemu",required = false) Integer kemu,
                                 @RequestParam(value = "licenceType",required = false) String licenceType){
        Page<AppointmentManage> page = (Page<AppointmentManage>)appointmentManageService.selectConditionByPage(offset, limit, licenceType, kemu);
        return new ResponsePageData<AppointmentManage>(page.getTotal(),page);
    }
    
    @PostMapping("save")
	@ResponseBody
	public String save(AppointmentManage model, String startTimeStr) {
		if (null == model) {
			return "error";
		}
		if (StringUtils.isNotEmpty(startTimeStr)) {
			model.setStartTime(DateUtil.getDate(startTimeStr, DateUtil.DATAFORMAT_STR));
		}
		if (model.getId() != null && model.getId() > 0) {
			// 更新
			AppointmentManage record = appointmentManageService.selectById(model.getId());
			if (null == record) {
				return "error";
			}
			record.setLimitCount(record.getLimitCount() + (model.getLimitCount() - record.getLimitCount()));
			record.setUpdateTime(new Date());
			return appointmentManageService.createOrUpdate(record) >= 1 ? "success" : "error";
		} else {
			model.setUpdateTime(new Date());
			model.setIsDelete(0);
			model.setCreateTime(new Date());
			model.setLeftCount(model.getLimitCount());
		}
		return appointmentManageService.createOrUpdate(model) >= 1 ? "success" : "error";
	}

 
    @DeleteMapping("del")
    @ResponseBody
    public int del(@RequestParam("id") Long id){
        return appointmentManageService.deleteById(id);
    }
}
