package com.migu.online.controller.web;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.time.DateUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.alibaba.fastjson.JSONArray;
import com.migu.online.common.UserCourseTypeEnum;
import com.migu.online.configuration.NeedLogin;
import com.migu.online.controller.BaseController;
import com.migu.online.model.ResposeModel;
import com.migu.online.model.User;
import com.migu.online.model.UserCourse;
import com.migu.online.model.UserExamRecord;
import com.migu.online.service.ExamTkCnService;
import com.migu.online.service.UserCourseService;
import com.migu.online.service.UserCourseVipService;
import com.migu.online.service.UserExamRecordService;
import com.migu.online.service.UserService;
import com.migu.online.utils.DateUtil;
import com.migu.online.vo.ExamStatus;
import com.migu.online.vo.ExamTkAnsVo;
import com.migu.online.vo.ExamTkVo;
import com.migu.online.vo.ExamTkVo2;
import com.migu.online.vo.ExamTkWrongVo;

/*用户答题*/
@Controller
@RequestMapping("/home/")
public class WebUserExamController extends BaseController{
	
	private static final long serialVersionUID = -8218831504167197421L;

	private Logger log = LoggerFactory.getLogger(WebUserExamController.class);

	@Autowired
	private ExamTkCnService examTkCnService;	
	@Autowired
	private UserExamRecordService userExamRecordService;
	@Autowired
	private UserCourseService userCourseService;
	@Autowired
	private UserCourseVipService userCourseVipService;
	@Autowired
	private UserService userService;
	
	/**
	 * 考试自由练习
	 * @return
	 */
	@GetMapping("free_practice")
	public String freePractice(ModelMap modelMap) {
		modelMap.put("isLogin", super.isLogin());
		//付费判断
//		UserCourse pay = userCourseService.selectPayCourseByUser(1l, super.getCurrentUserId(), UserCourseTypeEnum.practice.code);
//		if (null == pay) {
//			modelMap.put("msg", "用户未购买答题卡，无法答题");
//			return "redirect:/home/person_center/person_card";
//		}
		return "free_practice";
	}
	
	/**
	 * 考试自由练习
	 * @return
	 */
	@RequestMapping("free_practice_1")
	public String freePractice1(ModelMap modelMap, @RequestParam("kemu") Integer kemu, 
			@RequestParam("licType") Integer licType, @RequestParam("language") Integer language) {
//		//付费判断
//		UserCourse pay = userCourseService.selectPayCourseByUser(1l, super.getCurrentUserId(), UserCourseTypeEnum.practice.code);
//		if (null == pay) {
//			modelMap.put("msg", "用户未购买答题卡，无法答题");
//			return "redirect:/home/person_center/person_card";
//		}
		modelMap.put("isLogin", super.isLogin());
		modelMap.put("kemu", kemu);			
		modelMap.put("licType", licType);	
		modelMap.put("language", language);
		return "free_practice_1";
	}
	
	/**
	 * 考试自由练习
	 * @return
	 */
	@RequestMapping("free_practice_2")
	public String freePractice2(ModelMap modelMap, @RequestParam("kemu") Integer kemu, 
			@RequestParam("licType") Integer licType, 
			@RequestParam(name = "qusType", required = false) String qusType,
			@RequestParam(name = "examType", required = false) String examType,
			@RequestParam(name = "answerMap", required=false) String answerMap,
			@RequestParam(name = "language", required=false) Integer language) {
		User user = super.getCurrentUser();
		modelMap.put("isLogin", super.isLogin());
		modelMap.put("user", super.getCacheUser(super.getCurrentUserId()));
		if (null == kemu || null == licType || (StringUtils.isEmpty(examType) && StringUtils.isEmpty(qusType))) {			
			modelMap.put("msg", "查询条件为空");
			return "error";
		}
//		//付费判断
//		UserCourse pay = userCourseService.selectPayCourseByUser(1l, user.getId(), UserCourseTypeEnum.practice.code);
//		if (null == pay) {
//			modelMap.put("msg", "用户未购买答题卡，无法答题");
//			return "redirect:/home/person_center/person_card";
//		}
		if (null == language) {
			language = 0;
		}
		// 记录答题记录
		if (null != user) {
			examTkCnService.recordFreeExam(answerMap, user.getId(), user.getMobile(), kemu, licType, language);	
		} 
		modelMap.put("kemu", kemu);			
		modelMap.put("licType", licType);
		modelMap.put("qusType", qusType);			
		modelMap.put("examType", examType);
		modelMap.put("language", language);		
		modelMap.put("data", examTkCnService.freeDomQuestions(qusType, examType, kemu + "", licType, language));
		return "free_practice_2";
	}
	
	/**
	 * 模拟考试
	 * @return
	 */
	@NeedLogin
	@RequestMapping("simulation_test")
	public String simulationTest(ModelMap modelMap) {
		modelMap.put("isLogin", true);
		// vip用户，不用购买答题卡
		if (!userCourseVipService.isVipUser(super.getCurrentUserId())) {
			//付费判断
			UserCourse pay = userCourseService.selectPayCourseByUser(1l, super.getCurrentUserId(), UserCourseTypeEnum.practice.code);
			if (null == pay) {
				modelMap.put("msg", "用户未购买答题卡，无法答题");
				return "redirect:/home/person_center/person_card";
			}
			Long userId = super.getCurrentUserId();
			// 已购买练习卡，判断是否过期
			User nowUser = userService.selectById(userId);
			if (nowUser.getCardExpiredTime() == null) {
				nowUser.setCardExpiredTime(DateUtils.addHours(new Date(), 60));
				userService.update(nowUser);
			} else if (DateUtil.compareTime(DateUtils.addHours(nowUser.getCardExpiredTime(), 60), new Date())) {
				// 已过期
				pay.setIsDelete(1);
				userCourseService.createOrUpdate(pay);
				nowUser.setCardExpiredTime(null);
				userService.update(nowUser);
				modelMap.put("msg", "您够买的答题卡已过期，请重新购买");
				return "redirect:/home/person_center/person_card";
			}	
		}	
		return "simulation_test";
	}
	
	/**
	 * 模拟考试 生成试卷
	 * @return
	 */
	@NeedLogin
	@RequestMapping("simulation_test_1")
	public String simulationTest1(ModelMap modelMap, @RequestParam("kemu") Integer kemu, 
			@RequestParam("licType") Integer licType, @RequestParam(name = "language", required =false) Integer language) {
		User user = super.getCurrentUser();		
		modelMap.put("isLogin", true);
		modelMap.put("kemu", kemu);			
		modelMap.put("licType", licType);
		// vip用户，不用购买答题卡
		if (!userCourseVipService.isVipUser(super.getCurrentUserId())) {
			//付费判断
			UserCourse pay = userCourseService.selectPayCourseByUser(1l, super.getCurrentUserId(), UserCourseTypeEnum.practice.code);
			if (null == pay) {
				modelMap.put("msg", "用户未购买答题卡，无法答题");
				return "redirect:/home/person_center/person_card";
			}
			Long userId = super.getCurrentUserId();
			// 已购买练习卡，判断是否过期
			User nowUser = userService.selectById(userId);
			if (nowUser.getCardExpiredTime() == null) {
				nowUser.setCardExpiredTime(DateUtils.addHours(new Date(), 60));
				userService.update(nowUser);
			} else if (DateUtil.compareTime(DateUtils.addHours(nowUser.getCardExpiredTime(), 60), new Date())) {
				// 已过期
				pay.setIsDelete(1);
				userCourseService.createOrUpdate(pay);
				nowUser.setCardExpiredTime(null);
				userService.update(nowUser);
				modelMap.put("msg", "您够买的答题卡已过期，请重新购买");
				return "redirect:/home/person_center/person_card";
			}				
		}
		// 数据校验	
		ExamStatus es = examTkCnService.getUnFinishExam(user.getId());
		if (null != es && es.getSeconds() > 0) {
			// 有未完成的考试 直接加载上次考试
			modelMap.put("seconds", es.getSeconds());
			// 获取考试信息	
			UserExamRecord record = userExamRecordService.selectById(es.getExamId());
			if (null == record) {
				modelMap.put("code", "200002");
				modelMap.put("msg", "考试不存在");
				return "simulation_test_1";
			}
			ExamTkVo2 vo2 = examTkCnService.ansAndGetTest(es.getLastIndex(), 0, record, user.getId(), "", null, language);
			modelMap.put("data", vo2);
			modelMap.put("answerList", vo2.getAnswerList());
			modelMap.put("ansFlag", false);
			modelMap.put("answerData", "");
			modelMap.put("language", vo2.getLanguage());
			return "simulation_test_1";
		}
		ExamTkVo data = examTkCnService.examTestGenerate(user.getId(), user.getMobile(), licType, kemu, language);
		if (null == data || data.getExamId() == 0) {
			modelMap.put("msg", "相关考试内容不存在");
			return "simulation_test_1";
		}
		modelMap.put("data", data);
		UserExamRecord ue = userExamRecordService.selectById(data.getExamId());
		List<ExamTkAnsVo> list = new ArrayList<>();
		for (int i = 1; i <= ue.getCount(); i ++) {
			ExamTkAnsVo vo = new ExamTkAnsVo();
			vo.setIndex(i);
			vo.setIsCorrect(0);
			list.add(vo);
		}
		modelMap.put("answerList", list);
		modelMap.put("ansFlag", false);
		modelMap.put("answerData", "");
		modelMap.put("language", data.getLanguage());
		// 时间	
		modelMap.put("seconds", 1800);
		return "simulation_test_1";
	}
    
    /**
    * 模拟考试答题&获取题目 
    * @param curIndex 当前下标
    * @param next -1 上一题 1 下一题
    * @param examId 本次考试记录id
    * @return
    */
	@NeedLogin
    @RequestMapping("/ansAndGetTest")
	public String ansAndGetTest(ModelMap modelMap, @RequestParam("curIndex") Integer curIndex, 
			@RequestParam(value="next", required = false, defaultValue="0") Integer next,
			@RequestParam(value="answer", required = false) String answer, @RequestParam(value="isCorrect", required = false) Integer isCorrect) {
		User user = super.getCurrentUser();
		modelMap.put("isLogin", true);

	    // 获取课程
		try {
			if (curIndex <= 0 || curIndex >= 100) {
				return "error";
			}
			// 获取当前用户考试id
			Long examId = examTkCnService.getExamIdByUserId(user.getId());
			if (null == examId || examId <= 0) {
				modelMap.put("code", "200001");
				modelMap.put("msg", "考试超时，无法继续答题");
				return "simulation_test_1";
			}
			UserExamRecord record = userExamRecordService.selectById(examId);			
			if (null == record) {
				modelMap.put("code", "200002");
				modelMap.put("msg", "考试不存在");
				return "simulation_test_1";
			}
			modelMap.put("language", record.getLanguage());
			// 数据校验	
			ExamTkVo2 vo2 = examTkCnService.ansAndGetTest(curIndex, next, record, user.getId(), answer, isCorrect, record.getLanguage());
			modelMap.put("data", vo2);
			modelMap.put("answerList", vo2.getAnswerList());
			// 当前答题状态
			if (null != vo2.getAnswerList() && null != vo2.getAnswerList().get(vo2.getIndex())) {
				ExamTkAnsVo ansVo = vo2.getAnswerList().get(vo2.getIndex() - 1);
				modelMap.put("answerData", ansVo.getAnswer());
				modelMap.put("ansFlag", ansVo.getIsCorrect() == 0? false:true);
			} else {
				modelMap.put("answerData", "");
				modelMap.put("ansFlag", false);
			}
			// 时间	
			modelMap.put("seconds", examTkCnService.getUnFinishExam(user.getId()).getSeconds());

		} catch (Exception e) {
			log.info("ansAndGetTest:" + e.toString());
		}
		return "simulation_test_1";
	}
    
    /* 放弃本次考试 */
	@NeedLogin
    @RequestMapping("/abandonTest")
	public String abandonTest(ModelMap modelMap) {
		ResposeModel res = new ResposeModel();
		User user = super.getCurrentUser();
		if (null == user) {
			res.setStatus("0");
			res.setMsg("用户未登录");
			return "error";
		}
		examTkCnService.abandonTest(user.getId());
		return "redirect:/home/index";
	}
    
     
    /**
     * 交卷
     * @param curIndex 当前下标
     * @param examId 本次考试记录id
     * @return
     */
	@NeedLogin
    @RequestMapping("/submitTest")
 	public String submitTest(ModelMap modelMap, @RequestParam("curIndex") Integer curIndex, @RequestParam("examId") Long examId, 
 			@RequestParam(name = "answer", required=false) String answer, @RequestParam(name = "isCorrect", required=false) Integer isCorrect) {
 		ResposeModel res = new ResposeModel();
 		User user = super.getCurrentUser();
		modelMap.put("isLogin", true);	
 	    // 获取课程
 		try {
 			if (curIndex <= 0 || curIndex > 100) {
 				res.setStatus("0");
 				res.setMsg("题目范围在1~100" + curIndex);
 				return "error";
 			}
 			UserExamRecord record = userExamRecordService.selectById(examId);
 			if (null == record) {
 				res.setStatus("0");
 				res.setCode("200002");
 				res.setMsg("考试记录不存在");
 				return "error";
 			}
 			// 数据校验	
 			res.setData(examTkCnService.submitTest(curIndex, record, user.getId(), answer, isCorrect));
 			res.setMsg("提交成功");
 		} catch (Exception e) {
 			log.info("submitTest:" + e.toString());
 			res.setStatus("0");
 			res.setMsg("获取数据出错");
 		}
		return "redirect:/home/person_center/person_test";
 	}
    
    /* 我的自由练习考试列表 */
	@NeedLogin
    @RequestMapping("/person_center/person_practice")
	public String myFreeList(ModelMap modelMap) {
    	Long userId = super.getCurrentUserId();
		modelMap.put("isLogin", true);

		modelMap.put("user", super.getCacheUser(super.getCurrentUserId()));
		modelMap.put("pageList", userExamRecordService.selectByUserId(userId, 1));
		return "person_center/person_practice";
	}
    
    /* 我的模拟考试列表 */
	@NeedLogin
    @RequestMapping("/person_center/person_test")
	public String myTestList(ModelMap modelMap) {
    	Long userId = super.getCurrentUserId();
		modelMap.put("isLogin", true);

		modelMap.put("user", super.getCacheUser(super.getCurrentUserId()));	
		modelMap.put("pageList", userExamRecordService.selectByUserId(userId, 0));
		return "person_center/person_test";
	}
    
    /* 我的考试列表 */
	@NeedLogin
    @RequestMapping("/person_center/person_test_all")
	public String allMyTestList(ModelMap modelMap) {
    	Long userId = super.getCurrentUserId();
		modelMap.put("isLogin", true);

		modelMap.put("user", super.getCacheUser(super.getCurrentUserId()));	
		modelMap.put("pageList", userExamRecordService.selectByUserId(userId, null));
		return "person_center/person_test_all";
	}
    
	/**
	 * 复习
	 * 
	 * @param curIndex
	 *            当前下标
	 * @param examId
	 *            本次考试记录id
	 * @return
	 */
	@NeedLogin
	@RequestMapping("/reviewTest")
	public String reviewTest(ModelMap modelMap, @RequestParam("examId") Long examId,
			@RequestParam("curIndex") Integer curIndex) {
		modelMap.put("isLogin", true);
		modelMap.put("user", super.getCacheUser(super.getCurrentUserId()));		
		// 获取课程
		try {
			if (curIndex <= 0 || curIndex > 100) {
				return "error";
			}
			UserExamRecord record = userExamRecordService.selectById(examId);
			if (null == record) {
				modelMap.put("code", "200002");
				modelMap.put("msg", "考试不存在");
				return "person_center/person_practice_review";
			}
			// 数据校验
			List<ExamTkAnsVo> list = JSONArray.parseArray(record.getExamMap(), ExamTkAnsVo.class);
			// 过滤未答题
			List<ExamTkAnsVo> ansList = new ArrayList<>();
			int index = 1;
			for (ExamTkAnsVo vo: list) {
				if (vo.getIsCorrect() > 0) {
					vo.setIndex(index++);
					ansList.add(vo);
				}
			}
			if (curIndex <= 0 || curIndex > ansList.size()) {
				modelMap.put("code", "200002");
				modelMap.put("msg", "当前试题不存在");
				return "person_center/person_practice_review";
			}
			ExamTkAnsVo vo = list.get(curIndex - 1);
			ExamTkWrongVo wrongVo = new ExamTkWrongVo();				
			try {
				BeanUtils.copyProperties(wrongVo, examTkCnService.queryFreeExamByCode(vo.getExamCode(), record.getLanguage()));
				wrongVo.setWrongAns(vo.getAnswer());
				modelMap.put("answerList", ansList);
				wrongVo.setExamId(examId);
				wrongVo.setIndex(curIndex);
				modelMap.put("data", wrongVo);
			} catch (Exception e) {
				e.printStackTrace();
			}

		} catch (Exception e) {
			log.info("reviewTest:" + e.toString());
		}
		return "person_center/person_practice_review";
	}
	
	/**
	 * 错题列表
	 * 
	 * @param curIndex
	 *            当前下标
	 * @param examId
	 *            本次考试记录id
	 * @return
	 */
	@NeedLogin
	@RequestMapping("/wrongAnsList")
	public String wrongAnsList(ModelMap modelMap, @RequestParam("examId") Long examId,
			@RequestParam("curIndex") Integer curIndex) {
		modelMap.put("isLogin", true);
		modelMap.put("user", super.getCacheUser(super.getCurrentUserId()));		
		// 获取课程
		try {
			if (curIndex <= 0 || curIndex > 100) {
				return "error";
			}
			UserExamRecord record = userExamRecordService.selectById(examId);
			if (null == record) {
				modelMap.put("code", "200002");
				modelMap.put("msg", "考试不存在");
				return "person_center/person_practice_error";
			}
			// 数据校验
			List<ExamTkAnsVo> list = JSONArray.parseArray(record.getExamMap(), ExamTkAnsVo.class);
			List<ExamTkAnsVo> wrongList = new ArrayList<>();
			int index = 1;
			for (ExamTkAnsVo vo: list) {
				if (vo.getIsCorrect() == 2) {
					vo.setIndex(index++);
					wrongList.add(vo);
				}
			}
			if (curIndex <= 0 || curIndex > wrongList.size()) {
				modelMap.put("code", "200002");
				modelMap.put("msg", "当前试题不存在");
				return "person_center/person_practice_error";
			}
			ExamTkAnsVo vo = wrongList.get(curIndex - 1);
			ExamTkWrongVo wrongVo = new ExamTkWrongVo();				
			try {
				BeanUtils.copyProperties(wrongVo, examTkCnService.queryFreeExamByCode(vo.getExamCode(), vo.getLanguage()));
				wrongVo.setWrongAns(vo.getAnswer());
				modelMap.put("answerList", wrongList);
				wrongVo.setExamId(examId);
				wrongVo.setIndex(curIndex);
				modelMap.put("data", wrongVo);
			} catch (Exception e) {
				e.printStackTrace();
			}			

		} catch (Exception e) {
			log.info("reviewTest:" + e.toString());
		}
		return "person_center/person_practice_error";
	}
}
